import SwiftUI
import CoreData

// MARK: - Core Data Stack
class PersistenceController {
    static let shared = PersistenceController()
    let container: NSPersistentContainer

    init() {
        container = NSPersistentContainer(name: "TransactionsModel")
        container.loadPersistentStores { description, error in
            if let error = error {
                fatalError("Unable to load persistent stores: \(error)")
            }
        }
    }
}

// MARK: - Transaction Entity
extension Transaction: Identifiable {
    @NSManaged public var id: UUID?
    @NSManaged public var descriptionText: String?
    @NSManaged public var amount: Double
    @NSManaged public var date: Date?
    @NSManaged public var recurrence: String?
}

// MARK: - ContentView
struct ContentView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Transaction.date, ascending: true)],
        animation: .default)
    private var transactions: FetchedResults<Transaction>

    @State private var initialBalance: Double = 0.0
    @State private var startDate: Date = Date()
    @State private var endDate: Date = Date()
    @State private var showingAddTransaction = false

    var body: some View {
        NavigationView {
            VStack {
                Form {
                    Section(header: Text("Account Details")) {
                        TextField("Initial Balance", value: $initialBalance, format: .number)
                        DatePicker("Start Date", selection: $startDate, displayedComponents: .date)
                        DatePicker("End Date", selection: $endDate, displayedComponents: .date)
                    }
                }

                List {
                    ForEach(transactions) { transaction in
                        HStack {
                            Text(transaction.date!, formatter: dateFormatter)
                            Text(transaction.descriptionText ?? "")
                            Spacer()
                            Text("\(transaction.amount, specifier: "%.2f")")
                        }
                    }
                    .onDelete(perform: deleteTransactions)
                }
                .navigationTitle("Transactions")
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button(action: { showingAddTransaction.toggle() }) {
                            Label("Add Transaction", systemImage: "plus")
                        }
                    }
                }
                .sheet(isPresented: $showingAddTransaction) {
                    AddTransactionView()
                }
            }
        }
    }

    private func deleteTransactions(offsets: IndexSet) {
        withAnimation {
            offsets.map { transactions[$0] }.forEach(viewContext.delete)
            do {
                try viewContext.save()
            } catch {
                let nsError = error as NSError
                fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
            }
        }
    }
}

// MARK: - AddTransactionView
struct AddTransactionView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.presentationMode) var presentationMode

    @State private var descriptionText: String = ""
    @State private var amount: Double = 0.0
    @State private var date: Date = Date()
    @State private var recurrence: String = "None"

    let recurrences = ["None", "Daily", "Weekly", "Biweekly", "Monthly", "Annually"]

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Transaction Details")) {
                    TextField("Description", text: $descriptionText)
                    TextField("Amount", value: $amount, format: .number)
                    DatePicker("Date", selection: $date, displayedComponents: .date)
                    Picker("Recurrence", selection: $recurrence) {
                        ForEach(recurrences, id: \.self) {
                            Text($0)
                        }
                    }
                }
            }
            .navigationTitle("Add Transaction")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        addTransaction()
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }

    private func addTransaction() {
        let newTransaction = Transaction(context: viewContext)
        newTransaction.id = UUID()
        newTransaction.descriptionText = descriptionText
        newTransaction.amount = amount
        newTransaction.date = date
        newTransaction.recurrence = recurrence

        do {
            try viewContext.save()
        } catch {
            let nsError = error as NSError
            fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
        }
    }
}

// MARK: - Date Formatter
private let dateFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .short
    formatter.timeStyle = .none
    return formatter
}()

// MARK: - App Entry Point
@main
struct TransactionsApp: App {
    let persistenceController = PersistenceController.shared

    var body: some Scene {
        WindowGroup {
            ContentView()
                .environment(\.managedObjectContext, persistenceController.container.viewContext)
        }
    }
}